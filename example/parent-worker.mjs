/*
 * =============================================================================
 * FILE: parent-worker-example.mjs
 *
 * DESCRIPTION:
 * An example implementation of a "parent" worker that consumes the
 * divortio-session-worker service via an RPC service binding. This file
 * demonstrates the best practices for interacting with the hardened, resilient
 * session service.
 * =============================================================================
 */

/**
 * A helper function to apply all necessary `Set-Cookie` headers to a final
 * Response object. This encapsulates the boilerplate of appending headers.
 *
 * @param {Response} response - The final Response object created by your application logic.
 * @param {string[]} setCookieHeaders - The array of 'Set-Cookie' header strings.
 * @returns {Response} A new Response object that includes the appended `Set-Cookie` headers.
 */
function applySessionCookies(response, setCookieHeaders) {
    if (setCookieHeaders && setCookieHeaders.length > 0) {
        // Create a mutable copy of the headers to avoid modifying the original response
        const newHeaders = new Headers(response.headers);
        setCookieHeaders.forEach(header => {
            newHeaders.append('Set-Cookie', header);
        });
        // Return a new response with the new headers
        return new Response(response.body, {
            status: response.status,
            statusText: response.statusText,
            headers: newHeaders
        });
    }
    return response;
}

export default {
    /**
     * The main fetch handler for the parent worker.
     *
     * @param {Request} request - The incoming HTTP request.
     * @param {object} env - The environment object, including the `SESSION_SERVICE` binding.
     * @param {object} ctx - The execution context.
     * @returns {Promise<Response>} The final response to be sent to the browser.
     */
    async fetch(request, env, ctx) {
        // 1. Get the complete, rich session context by destructuring the RPC response.
        const {
            enrichedRequest,
            cID, sID, eID,
            oldState,
            isNewClient,
            isNewSession,
            isNewDoID,
            isNewFpID,
            doID,
            fpID,
            setCookieHeaders
        } = await env.SESSION_SERVICE.processSession(request);

        /*
         * Alternatively, you can capture the entire context in one object:
         * const session = await env.SESSION_SERVICE.processSession(request);
         * if (session.cID === null) {
         * // This indicates a graceful fallback occurred.
         * }
        */

        // --- Your Application Logic Starts Here ---

        // Example: Perform detailed logging or analytics based on the rich context.
        if (isNewClient) {
            console.log(`New client detected! fpID: ${fpID}, DO Name: ${doID}`);
        } else if (isNewSession) {
            console.log(`New session started for client ${cID}. Previous sID: ${oldState.sID}, New sID: ${sID}`);
        }

        // Use the enrichedRequest for any downstream services (e.g., logging).
        if (enrichedRequest) {
            // ctx.waitUntil(env.LOGGER.log(enrichedRequest));
        }

        const appResponse = await yourApplicationLogic(enrichedRequest, {cID, sID, eID});

        // --- End of Application Logic ---

        // 2. Apply all necessary cookies to the final response with one line.
        return applySessionCookies(appResponse, setCookieHeaders);
    }
};

/**
 * An example of your application's core business logic.
 *
 * @param {Request} request - The request object, enriched with a `Cookie` header.
 * @param {{cID: string, sID: string, eID: string}} session - Core session IDs.
 * @returns {Promise<Response>} The response generated by your application.
 */
async function yourApplicationLogic(request, session) {
    const body = `
        Hello, world! This is your app logic.
        Your Client ID is: ${session.cID}
        Your Session ID is: ${session.sID}
    `;

    return new Response(body, {
        headers: {'Content-Type': 'text/plain'}
    });
}