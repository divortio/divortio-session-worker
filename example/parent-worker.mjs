/*
 * =============================================================================
 * FILE: parent-worker-example.mjs
 *
 * DESCRIPTION:
 * An example implementation of a "parent" worker that consumes the
 * divortio-session-worker service. This demonstrates the final, elegant API
 * where the parent worker receives a single, enriched request object.
 * =============================================================================
 */

export default {
    /**
     * The main fetch handler for the parent worker.
     *
     * @param {Request} request - The original incoming HTTP request.
     * @param {object} env - The environment object, including the `SESSION_SERVICE` binding.
     * @param {object} ctx - The execution context.
     * @returns {Promise<Response>} The final response to be sent to the browser.
     */
    async fetch(request, env, ctx) {
        // 1. Get the single, enriched request object from the session service.
        const enrichedRequest = await env.SESSION_SERVICE.processSession(request);

        // --- Your Application Logic Starts Here ---

        // All session data is now conveniently available on the `.session` property.
        if (enrichedRequest.session.isNewClient) {
            console.log(`New client detected! fpID: ${enrichedRequest.session.fpID}`);
        }

        // Use the enrichedRequest for any downstream services (e.g., logging).
        // ctx.waitUntil(env.LOGGER.log(enrichedRequest));

        const appResponse = await yourApplicationLogic(enrichedRequest);

        // --- End of Application Logic ---

        // 2. Apply cookies to the final response using the built-in convenience method.
        return enrichedRequest.session.applySessionCookies(appResponse);
    }
};

/**
 * An example of your application's core business logic.
 *
 * @param {Request} request - The enriched request object, now with a `.session` property.
 * @returns {Promise<Response>} The response generated by your application.
 */
async function yourApplicationLogic(request) {
    const body = `
        Hello, world! This is your app logic.
        Your Client ID is: ${request.session.cID || 'N/A'}
        Your Session ID is: ${request.session.sID || 'N/A'}
    `;

    return new Response(body, {
        headers: {'Content-Type': 'text/plain'}
    });
}